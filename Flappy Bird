<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flappy Bird with Better Animations</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            font-family: 'Arial', sans-serif;
            overflow: hidden;
        }
        
        #game-container {
            position: relative;
            width: 400px;
            height: 600px;
            background-color: #87CEEB;
            overflow: hidden;
            border-radius: 10px;
            box-shadow: 0 0 30px rgba(0, 0, 0, 0.5);
        }
        
        #bird {
            position: absolute;
            width: 50px;
            height: 50px;
            background-image: url('https://iili.io/3DPrdxe.png');
            background-size: contain;
            background-repeat: no-repeat;
            z-index: 10;
            transition: transform 0.2s ease-out;
            transform-origin: center center;
        }
        
        .pipe {
            position: absolute;
            width: 60px;
            background: linear-gradient(to bottom, #4CAF50, #8BC34A);
            border: 3px solid #2E7D32;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        }
        
        .pipe-top {
            top: 0;
            background: linear-gradient(to top, #4CAF50, #8BC34A);
        }
        
        .pipe-bottom {
            bottom: 0;
        }
        
        #score {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 30px;
            color: white;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            z-index: 20;
        }
        
        #game-over {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            display: none;
            z-index: 30;
        }
        
        #restart-btn {
            background: linear-gradient(45deg, #FF512F, #DD2476);
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
            transition: transform 0.2s;
        }
        
        #restart-btn:hover {
            transform: scale(1.05);
        }
        
        .cloud {
            position: absolute;
            background-color: white;
            border-radius: 50%;
            opacity: 0.8;
            z-index: 1;
        }
        
        #ground {
            position: absolute;
            bottom: 0;
            width: 100%;
            height: 20px;
            background: linear-gradient(45deg, #8B4513, #A0522D, #CD853F);
            z-index: 5;
        }
        
        .coin {
            position: absolute;
            width: 20px;
            height: 20px;
            background: radial-gradient(circle at 30% 30%, #FFD700, #FFA500);
            border-radius: 50%;
            z-index: 8;
            box-shadow: 0 0 10px gold;
            animation: pulse 1s infinite alternate;
        }
        
        @keyframes pulse {
            from { transform: scale(1); }
            to { transform: scale(1.2); }
        }
        
        .explosion {
            position: absolute;
            width: 50px;
            height: 50px;
            background: radial-gradient(circle, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0) 70%);
            border-radius: 50%;
            z-index: 40;
            pointer-events: none;
            animation: explode 0.5s forwards;
        }
        
        @keyframes explode {
            0% { transform: scale(0); opacity: 1; }
            100% { transform: scale(3); opacity: 0; }
        }
        
        @keyframes flap {
            0% { transform: rotate(-10deg) scaleY(1); }
            50% { transform: rotate(10deg) scaleY(0.9); }
            100% { transform: rotate(-10deg) scaleY(1); }
        }
    </style>
</head>
<body>
    <div id="game-container">
        <div id="bird"></div>
        <div id="ground"></div>
        <div id="score">0</div>
        <div id="game-over">
            <h2>Game Over!</h2>
            <p>Your score: <span id="final-score">0</span></p>
            <button id="restart-btn">Play Again (Space/Up Arrow/Click)</button>
        </div>
    </div>

    <script>
        // Game variables
        const gameContainer = document.getElementById('game-container');
        const bird = document.getElementById('bird');
        const scoreElement = document.getElementById('score');
        const gameOverElement = document.getElementById('game-over');
        const finalScoreElement = document.getElementById('final-score');
        const restartBtn = document.getElementById('restart-btn');
        const ground = document.getElementById('ground');
        
        let birdY = 300;
        let birdVelocity = 0;
        let gravity = 0.5;
        let jumpForce = -10;
        let gameRunning = true;
        let score = 0;
        let pipes = [];
        let clouds = [];
        let coins = [];
        let gameSpeed = 2;
        let pipeGap = 200;
        let pipeFrequency = 1500; // milliseconds
        let lastPipeTime = 0;
        let animationId;
        let groundOffset = 0;
        let flapAnimationId;
        let isFlapping = false;
        let lastFrameTime = 0;
        
        // Game dimensions
        const gameWidth = gameContainer.offsetWidth;
        const gameHeight = gameContainer.offsetHeight;
        
        // Initialize bird position
        bird.style.left = '100px';
        bird.style.top = birdY + 'px';
        
        // Update bird rotation based on velocity
        function updateBirdRotation() {
            // Calculate rotation angle based on velocity (-30 to 30 degrees)
            let angle = birdVelocity * 3;
            angle = Math.max(-30, Math.min(30, angle)); // Clamp between -30 and 30
            bird.style.transform = `rotate(${angle}deg)`;
        }
        
        // Wing flap animation
        function startFlapAnimation() {
            if (isFlapping) return;
            isFlapping = true;
            bird.style.animation = 'flap 0.3s infinite';
        }
        
        function stopFlapAnimation() {
            isFlapping = false;
            bird.style.animation = 'none';
        }
        
        // Create clouds
        function createClouds() {
            for (let i = 0; i < 5; i++) {
                createCloud();
            }
        }
        
        function createCloud() {
            const cloud = document.createElement('div');
            cloud.className = 'cloud';
            
            const size = Math.random() * 50 + 50;
            const x = Math.random() * gameWidth;
            const y = Math.random() * (gameHeight / 2);
            const opacity = Math.random() * 0.5 + 0.3;
            
            cloud.style.width = size + 'px';
            cloud.style.height = size / 2 + 'px';
            cloud.style.left = x + 'px';
            cloud.style.top = y + 'px';
            cloud.style.opacity = opacity;
            
            gameContainer.appendChild(cloud);
            clouds.push({
                element: cloud,
                x: x,
                y: y,
                speed: Math.random() * 0.5 + 0.2
            });
        }
        
        // Create coins
        function createCoin(x, y) {
            const coin = document.createElement('div');
            coin.className = 'coin';
            coin.style.left = x + 'px';
            coin.style.top = y + 'px';
            gameContainer.appendChild(coin);
            coins.push({
                element: coin,
                x: x,
                y: y,
                collected: false
            });
        }
        
        // Create pipes
        function createPipe() {
            const pipeHeight = Math.random() * (gameHeight - pipeGap - 200) + 50;
            
            // Top pipe
            const topPipe = document.createElement('div');
            topPipe.className = 'pipe pipe-top';
            topPipe.style.height = pipeHeight + 'px';
            topPipe.style.left = gameWidth + 'px';
            topPipe.style.top = '0';
            gameContainer.appendChild(topPipe);
            
            // Bottom pipe
            const bottomPipe = document.createElement('div');
            bottomPipe.className = 'pipe pipe-bottom';
            bottomPipe.style.height = (gameHeight - pipeHeight - pipeGap) + 'px';
            bottomPipe.style.left = gameWidth + 'px';
            bottomPipe.style.bottom = '0';
            gameContainer.appendChild(bottomPipe);
            
            // Add coin between pipes
            const coinX = gameWidth + 30;
            const coinY = pipeHeight + pipeGap / 2 - 10;
            createCoin(coinX, coinY);
            
            pipes.push({
                top: topPipe,
                bottom: bottomPipe,
                x: gameWidth,
                passed: false
            });
        }
        
        // Jump function
        function jump() {
            if (!gameRunning) {
                // If game is over, treat jump as restart
                restartGame();
                return;
            }
            
            birdVelocity = jumpForce;
            
            // Start flapping animation when jumping
            startFlapAnimation();
            
            // Update rotation immediately
            updateBirdRotation();
        }
        
        // Check collisions
        function checkCollision() {
            // Ground collision
            if (birdY + 50 > gameHeight - 20) {
                return true;
            }
            
            // Ceiling collision
            if (birdY < 0) {
                return true;
            }
            
            // Pipe collisions
            for (const pipe of pipes) {
                const birdLeft = 100;
                const birdRight = 100 + 50;
                const birdTop = birdY;
                const birdBottom = birdY + 50;
                
                const pipeLeft = pipe.x;
                const pipeRight = pipe.x + 60;
                
                // Check if bird is within pipe's x-range
                if (birdRight > pipeLeft && birdLeft < pipeRight) {
                    const topPipeBottom = parseInt(pipe.top.style.height);
                    const bottomPipeTop = gameHeight - parseInt(pipe.bottom.style.height);
                    
                    // Check if bird is outside the gap
                    if (birdTop < topPipeBottom || birdBottom > bottomPipeTop) {
                        return true;
                    }
                }
            }
            
            return false;
        }
        
        // Check coin collection
        function checkCoins() {
            const birdLeft = 100;
            const birdRight = 100 + 50;
            const birdTop = birdY;
            const birdBottom = birdY + 50;
            
            for (let i = 0; i < coins.length; i++) {
                const coin = coins[i];
                if (coin.collected) continue;
                
                const coinLeft = coin.x;
                const coinRight = coin.x + 20;
                const coinTop = coin.y;
                const coinBottom = coin.y + 20;
                
                if (birdRight > coinLeft && birdLeft < coinRight &&
                    birdBottom > coinTop && birdTop < coinBottom) {
                    
                    // Collect coin
                    coin.collected = true;
                    coin.element.remove();
                    score += 5;
                    scoreElement.textContent = score;
                    
                    // Create explosion effect
                    const explosion = document.createElement('div');
                    explosion.className = 'explosion';
                    explosion.style.left = (coin.x - 15) + 'px';
                    explosion.style.top = (coin.y - 15) + 'px';
                    gameContainer.appendChild(explosion);
                    
                    // Remove explosion after animation
                    setTimeout(() => {
                        explosion.remove();
                    }, 500);
                    
                    // Increase game speed slightly
                    gameSpeed += 0.05;
                }
            }
        }
        
        // Game over
        function gameOver() {
            gameRunning = false;
            cancelAnimationFrame(animationId);
            stopFlapAnimation();
            finalScoreElement.textContent = score;
            gameOverElement.style.display = 'block';
            
            // Add explosion effect on bird
            const explosion = document.createElement('div');
            explosion.className = 'explosion';
            explosion.style.left = (100 - 25) + 'px';
            explosion.style.top = (birdY - 25) + 'px';
            explosion.style.background = 'radial-gradient(circle, rgba(255,0,0,0.8) 0%, rgba(255,0,0,0) 70%)';
            gameContainer.appendChild(explosion);
            
            // Remove explosion after animation
            setTimeout(() => {
                explosion.remove();
            }, 500);
        }
        
        // Restart game
        function restartGame() {
            // Clear pipes
            for (const pipe of pipes) {
                pipe.top.remove();
                pipe.bottom.remove();
            }
            pipes = [];
            
            // Clear coins
            for (const coin of coins) {
                if (coin.element.parentNode) {
                    coin.element.remove();
                }
            }
            coins = [];
            
            // Reset variables
            birdY = 300;
            birdVelocity = 0;
            gameRunning = true;
            score = 0;
            gameSpeed = 2;
            lastPipeTime = 0;
            groundOffset = 0;
            
            // Reset UI
            scoreElement.textContent = '0';
            gameOverElement.style.display = 'none';
            bird.style.top = birdY + 'px';
            bird.style.transform = 'rotate(0deg)';
            
            // Start game loop
            lastFrameTime = performance.now();
            animationId = requestAnimationFrame(gameLoop);
        }
        
        // Game loop
        function gameLoop(timestamp) {
            if (!gameRunning) return;
            
            // Calculate delta time for smooth animation
            const deltaTime = timestamp - lastFrameTime;
            lastFrameTime = timestamp;
            
            // Update bird
            birdVelocity += gravity * (deltaTime / 16.67); // Normalize to ~60fps
            birdY += birdVelocity * (deltaTime / 16.67);
            bird.style.top = birdY + 'px';
            
            // Update bird rotation based on velocity
            updateBirdRotation();
            
            // Create new pipes
            if (timestamp - lastPipeTime > pipeFrequency) {
                createPipe();
                lastPipeTime = timestamp;
                
                // Randomize pipe gap occasionally
                if (Math.random() > 0.7) {
                    pipeGap = Math.random() * 100 + 150;
                }
            }
            
            // Move pipes
            for (let i = pipes.length - 1; i >= 0; i--) {
                const pipe = pipes[i];
                pipe.x -= gameSpeed * (deltaTime / 16.67);
                pipe.top.style.left = pipe.x + 'px';
                pipe.bottom.style.left = pipe.x + 'px';
                
                // Check if pipe is passed
                if (!pipe.passed && pipe.x < 100 - 60) {
                    pipe.passed = true;
                    score += 1;
                    scoreElement.textContent = score;
                }
                
                // Remove pipes that are off screen
                if (pipe.x < -60) {
                    pipe.top.remove();
                    pipe.bottom.remove();
                    pipes.splice(i, 1);
                }
            }
            
            // Move coins
            for (let i = coins.length - 1; i >= 0; i--) {
                const coin = coins[i];
                if (coin.collected) continue;
                
                coin.x -= gameSpeed * (deltaTime / 16.67);
                coin.element.style.left = coin.x + 'px';
                
                // Remove coins that are off screen
                if (coin.x < -20) {
                    coin.element.remove();
                    coins.splice(i, 1);
                }
            }
            
            // Move clouds
            for (let i = clouds.length - 1; i >= 0; i--) {
                const cloud = clouds[i];
                cloud.x -= cloud.speed * (deltaTime / 16.67);
                cloud.element.style.left = cloud.x + 'px';
                
                // Reset cloud when it goes off screen
                if (cloud.x < -100) {
                    cloud.x = gameWidth;
                    cloud.y = Math.random() * (gameHeight / 2);
                    cloud.element.style.left = cloud.x + 'px';
                    cloud.element.style.top = cloud.y + 'px';
                }
            }
            
            // Animate ground
            groundOffset = (groundOffset + gameSpeed * (deltaTime / 16.67)) % 20;
            ground.style.backgroundPositionX = -groundOffset + 'px';
            
            // Check collisions and coins
            if (checkCollision()) {
                gameOver();
                return;
            }
            
            checkCoins();
            
            // Continue game loop
            animationId = requestAnimationFrame(gameLoop);
        }
        
        // Event listeners
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space' || e.key === ' ' || e.key === 'ArrowUp') {
                jump();
                e.preventDefault();
            }
            
            if (e.code === 'KeyR' && !gameRunning) {
                restartGame();
            }
        });
        
        gameContainer.addEventListener('click', jump);
        restartBtn.addEventListener('click', restartGame);
        
        // Initialize game
        createClouds();
        lastFrameTime = performance.now();
        animationId = requestAnimationFrame(gameLoop);
    </script>
</body>
</html>
